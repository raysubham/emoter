import { GetStaticPaths, GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { PostView } from "~/components/PostView";
import { LoadingSpinner } from "~/components/LoadingSpinner";
import { PageLayout } from "../../components/PageLayout";
import { generateServerSideHelper } from "~/server/api/helpers/generateServerSideHelper";

const PostPage: NextPage<{ id: string }> = ({ id }) => {
  const { data } = api.posts.getById.useQuery(
    {
      id,
    },
    {
      refetchOnMount: false,
    }
  );

  if (!data)
    return (
      <div className="h-screen">
        <LoadingSpinner size={60} />
      </div>
    );

  if (!data?.post || !data.author) return <div>Post not found</div>;

  return (
    <>
      <Head>
        <title>Emoter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLayout>
        <PostView post={data.post} author={data.author} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const trpcHelper = generateServerSideHelper();

  const id = context.params?.id as string;

  if (typeof id !== "string") throw new Error("no id");

  await trpcHelper.posts.getById.prefetch({ id });

  return {
    props: {
      trpcState: trpcHelper.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default PostPage;
